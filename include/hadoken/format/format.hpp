/**
 * Copyright (c) 2019, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#pragma once


#include <ostream>
#include <sstream>
#include <string>
#include <type_traits>

namespace hadoken {

inline void scat(std::ostream & ostream){
    (void) ostream;
}

///
/// @brief scat
///
/// concatenate an arbitrary list of argument to an std::ostream
/// Proviate an alternative syntax to iostream for convenience
///
///  e.g
///  format::scat(std::cout, "hello world ", "I am ", 2500, " years old today");
///
///  support any type handled by ostream
///
///
template<typename T, typename ... Args>
inline void scat(std::ostream & ostream, const T & arg1, const Args&...  args){
    ostream << arg1;
    scat(ostream, args...);
}

// enable only for 1st argument != ostream
///
/// @brief scat
///
/// concatenate an arbitrary list of argument to a string representation.
/// Proviate an alternative syntax to iostream for convenience
///
///  e.g
///  auto stre = format::scat("hello world", "I am ", 2500, "years old today");
///
///  support any type handled by ostream
///
///
template<typename T, typename ... Args>
inline  typename std::enable_if<(not std::is_base_of<std::ostream, T>::value), std::string>::type
scat(const T & arg1, const Args&...  args){
    std::ostringstream oss;
    scat(oss, arg1, args...);
    return oss.str();
}





// for compatibility purpose with the deprecated
// hadoken::format namespace
namespace format{
    using namespace hadoken;
}


} //hadoken


