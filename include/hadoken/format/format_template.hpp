/**
 * Copyright (c) 2019, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#pragma once


#include <algorithm>
#include <ostream>
#include <sstream>
#include <string>
#include <type_traits>
#include <vector>

#include <hadoken/string/string_view.hpp>


namespace hadoken {


using format_arg = std::tuple<hadoken::string_view, hadoken::string_view>;

///
/// minimalist template formatting
///
/// replace any {variable} in the template by its corresponding value in the argument list
///
///
/// \brief format_template
/// \param template_string
/// \param variables
/// \return
///
inline std::string format_template(hadoken::string_view template_string, const std::vector<format_arg>& args) {
    std::string result(to_string(template_string));

    for (const auto& var : args) {
        std::string tmpl_key;
        tmpl_key.push_back('{');
        tmpl_key.append(to_string(std::get<0>(var)));
        tmpl_key.push_back('}');

        auto it_begin = result.begin();
        while (1) {
            it_begin = std::search(it_begin, result.end(), tmpl_key.begin(), tmpl_key.end());

            if (it_begin == result.end()) {
                break;
            }

            const std::size_t offset = std::distance(result.begin(), it_begin);

            const auto& replacer = std::get<1>(var);
            result = result.replace(it_begin, it_begin + std::distance(tmpl_key.begin(), tmpl_key.end()), replacer.begin(),
                                    replacer.end());

            it_begin = result.begin() + offset + std::distance(replacer.begin(), replacer.end());
        }
    }
    return result;
}


} // namespace hadoken
