/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef HADOKEN_STATIC_ARRAY_HPP
#define HADOKEN_STATIC_ARRAY_HPP


#include <hadoken/config/platform_config.hpp>

namespace hadoken {


namespace gpu {

//
// hadoken::array is a drop-in replacement for std::array in case of GPU compilation ( CUDA )
//
// DO NOT use it for code which does not aim GPU
//
template <typename T, std::size_t N>
class array {
  public:
    typedef T value_type;

    HADOKEN_DECORATE_HOST_DEVICE
    inline T* begin() { return _arr; }

    HADOKEN_DECORATE_HOST_DEVICE
    inline T* begin() const { return _arr; }

    HADOKEN_DECORATE_HOST_DEVICE
    inline T* end() { return _arr + N; }

    HADOKEN_DECORATE_HOST_DEVICE
    inline T* end() const { return _arr + N; }

    HADOKEN_DECORATE_HOST_DEVICE
    inline std::size_t size() const { return N; }

    HADOKEN_DECORATE_HOST_DEVICE
    inline T& operator[](int pos) { return _arr[pos]; }

    HADOKEN_DECORATE_HOST_DEVICE
    inline T operator[](int pos) const { return _arr[pos]; }

  private:
    T _arr[N];
};


} // namespace gpu


} // namespace hadoken

#endif // STATIC_ARRAY_HPP
