/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef PARALLEL_NONE_ANY_ALL_GENERIC_HPP
#define PARALLEL_NONE_ANY_ALL_GENERIC_HPP

#include <algorithm>
#include <atomic>
#include <hadoken/parallel/algorithm.hpp>


#include "parallel_generic_utils.hpp"


namespace hadoken {


namespace parallel {


namespace detail {} // namespace detail


template <class ExecutionPolicy, class InputIterator, class UnaryPredicate>
inline bool all_of(ExecutionPolicy&& policy, InputIterator first, InputIterator last, UnaryPredicate p) {

    if (detail::is_parallel_policy(policy)) {
        std::atomic<bool> res(true);

        hadoken::parallel::for_range(std::forward<ExecutionPolicy>(policy), first, last,
                                     [&res, &p](InputIterator local_first, InputIterator local_end) {
                                         const bool local_res = std::all_of(local_first, local_end, p);

                                         if (local_res == false) {
                                             res.store(false);
                                         }
                                     });
        return res.load();
    } else {
        return std::all_of(first, last, p);
    }
}


template <class ExecutionPolicy, class InputIterator, class UnaryPredicate>
inline bool any_of(ExecutionPolicy&& policy, InputIterator first, InputIterator last, UnaryPredicate p) {

    if (detail::is_parallel_policy(policy)) {
        std::atomic<bool> res(false);

        hadoken::parallel::for_range(std::forward<ExecutionPolicy>(policy), first, last,
                                     [&res, &p](InputIterator local_first, InputIterator local_end) {
                                         const bool local_res = std::any_of(local_first, local_end, p);

                                         if (local_res == true) {
                                             res.store(true);
                                         }
                                     });
        return res.load();
    } else {
        return std::any_of(first, last, p);
    }
}




template <class ExecutionPolicy, class InputIterator, class UnaryPredicate>
inline bool none_of(ExecutionPolicy&& policy, InputIterator first, InputIterator last, UnaryPredicate p) {

    if (detail::is_parallel_policy(policy)) {
        std::atomic<bool> res(true);

        hadoken::parallel::for_range(std::forward<ExecutionPolicy>(policy), first, last,
                                     [&res, &p](InputIterator local_first, InputIterator local_end) {
                                         const bool local_res = std::none_of(local_first, local_end, p);

                                         if (local_res == false) {
                                             res.store(false);
                                         }
                                     });
        return res.load();
    } else {
        return std::none_of(first, last, p);
    }
}


} // namespace parallel

} // namespace hadoken

#endif // PARALLEL_ALGORITHM_GENERICS_HPP
