/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef _HADOKEN_GNU_PSTL_ALGORITHM_IMPL_HPP_
#define _HADOKEN_GNU_PSTL_ALGORITHM_IMPL_HPP_

#include <vector>
#include <algorithm>


#include <parallel/algorithm>
#include <parallel/for_each.h>

#include <hadoken/parallel/algorithm.hpp>
#include <hadoken/parallel/bits/parallel_generic_utils.hpp>

#include <hadoken/parallel/bits/parallel_none_any_all_generic.hpp>



namespace hadoken{


namespace parallel{


namespace detail{

namespace pstd = __gnu_parallel;



} // detail


// map for each function
template<typename ExecPolicy, typename Iterator, typename Function>
inline void for_each(ExecPolicy && policy, Iterator begin_it, Iterator end_it, Function fun){
    if(detail::is_parallel_policy(policy)){
        detail::pstd::for_each(begin_it, end_it, fun);
        return;
    }
    std::for_each(begin_it, end_it, fun);
}

// map transform algorithm binary
template< class ExecutionPolicy, class InputIterator1, class InputIterator2, class OutputIterator, class BinaryOperation >
OutputIterator transform( ExecutionPolicy&& policy, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2,
                    OutputIterator d_first, BinaryOperation binary_op ){

    if(detail::is_parallel_policy(policy)){
        return detail::pstd::transform(first1, last1, first2, d_first, binary_op);
    }
    return std::transform(first1, last1, first2, d_first, binary_op);
    

}


// map transform algorithm unary
template< class ExecutionPolicy, class InputIt, class OutputIt, class UnaryOperation >
OutputIt transform( ExecutionPolicy&& policy, InputIt first1, InputIt last1, OutputIt d_first,
                    UnaryOperation unary_op ){

    if(detail::is_parallel_policy(policy)){
        return detail::pstd::transform(first1, last1, d_first, unary_op);
    }
    return std::transform(first1, last1, d_first, unary_op);

}


// parallel generate algorithm
template< class ExecutionPolicy, class ForwardIterator, class Generator >
void generate( ExecutionPolicy&& policy, ForwardIterator first, ForwardIterator last, Generator g ){
    
    if(detail::is_parallel_policy(policy)){
        detail::pstd::generate(first, last, g);
    }else{
        std::generate(first, last, g);
    }
}

// parallel generate_n algorithm
template< class ExecutionPolicy, class OutputIt, class Size, class Generator >
OutputIt generate_n( ExecutionPolicy&& policy, OutputIt first, Size count, Generator g ){
    
    if(detail::is_parallel_policy(policy)){
        detail::pstd::generate_n(first, count, g);
    }else{
        std::generate_n(first, count, g);
    }

}

// reimplement fill using for_each
template <typename ExecutionPolicy, class ForwardIterator, class T>
void fill(ExecutionPolicy && policy, ForwardIterator first, ForwardIterator last, const T& val){
    hadoken::parallel::generate(std::forward<ExecutionPolicy>(policy), first, last, [&val](){
        return val;
    });
}


//  reimplement fill_n using fill
template <typename ExecutionPolicy, class ForwardIterator, class Size, class T>
void fill_n(ExecutionPolicy && policy, ForwardIterator first, Size n, const T& val){
    ForwardIterator last = first;
    std::advance(last , n);
    hadoken::parallel::fill(std::forward<ExecutionPolicy>(policy), first, last, val);
}



// parallel count_if algorithm
template< class ExecutionPolicy, class InputIterator, class UnaryPredicate >
typename std::iterator_traits<InputIterator>::difference_type
    count_if( ExecutionPolicy&& policy, InputIterator first, InputIterator last, UnaryPredicate p ){

    if(detail::is_parallel_policy(policy)){
        return detail::pstd::count_if(first, last, p);
    }else{
        return std::count_if(first, last, p);
    }
}

// parallel count algorithm
template< class ExecutionPolicy, class InputIterator, class T >
typename std::iterator_traits<InputIterator>::difference_type
    count( ExecutionPolicy&& policy, InputIterator first, InputIterator last, const T &value ){

    if(detail::is_parallel_policy(policy)){
        return detail::pstd::count(first, last, value);
    }else{
        return std::count(first, last, value);
    }
}


// sort algorithm
template< class ExecutionPolicy, class RandomIt >
void sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last){
    if(detail::is_parallel_policy(policy)){
        detail::pstd::sort(first, last);
    }else {
        std::sort(first, last);
    }
}


// sort algorithm
template< class ExecutionPolicy, class RandomIt, class Comp>
void sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last, Comp comparator){
    if(detail::is_parallel_policy(policy)){
        detail::pstd::sort(first, last, comparator);
    }else {
        std::sort(first, last, comparator);
    }
}


// for range
// very inefficient way to map for_range to for_each
// but required for compatibility
template<typename ExecPolicy, typename Iterator, typename RangeFunction>
inline void for_range(ExecPolicy && policy, Iterator begin_it, Iterator end_it, RangeFunction fun){
    if(detail::is_parallel_policy(policy)){
        std::vector<Iterator> all_elems;
        using iterator_vec_it = typename std::vector<Iterator>::iterator;
        
        const std::size_t n_elems = std::distance(begin_it, end_it);
        
        all_elems.reserve(n_elems+1);

        for(auto it = begin_it; it != end_it; ++it){
            all_elems.push_back(it);
        }
        all_elems.push_back(end_it);

        iterator_vec_it first_elem = all_elems.begin(), last_elem = all_elems.end()-1;
        detail::pstd::for_each(first_elem, last_elem, [&fun](Iterator & it){
            Iterator local_last = it;
            std::advance(local_last, 1);
            fun(it, local_last);
        });

        return;
    }

   fun(begin_it, end_it);
}




} // parallel



} // hadoken


#endif
