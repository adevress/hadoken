/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef PARALLEL_COUNT_GENERICS_BITS_HPP
#define PARALLEL_COUNT_GENERICS_BITS_HPP

#include <algorithm>
#include <hadoken/parallel/algorithm.hpp>


#include "parallel_generic_utils.hpp"


namespace hadoken {


namespace parallel {


namespace detail {

// count_internal
template <class ExecutionPolicy, class InputIterator, class UnaryPredicate>
typename std::iterator_traits<InputIterator>::difference_type _internal_count_if(ExecutionPolicy&& policy, InputIterator first,
                                                                                 InputIterator last, UnaryPredicate p) {
    using result_type = typename std::iterator_traits<InputIterator>::difference_type;

    if (is_parallel_policy(policy)) {
        std::atomic<result_type> res(0);

        ::hadoken::parallel::for_range(std::forward<ExecutionPolicy>(policy), first, last,
                                       [&res, &p](InputIterator local_first, InputIterator local_end) {
                                           result_type local_res = std::count_if(local_first, local_end, p);
                                           res += local_res;
                                       });
        return res;
    } else {
        return std::count_if(first, last, p);
    }
}

} // namespace detail


// parallel count_if algorithm
template <class ExecutionPolicy, class InputIterator, class UnaryPredicate>
typename std::iterator_traits<InputIterator>::difference_type count_if(ExecutionPolicy&& policy, InputIterator first,
                                                                       InputIterator last, UnaryPredicate p) {

    return detail::_internal_count_if<ExecutionPolicy, InputIterator, UnaryPredicate>(std::move(policy), first, last, p);
}

// parallel count algorithm
template <class ExecutionPolicy, class InputIterator, class T>
typename std::iterator_traits<InputIterator>::difference_type count(ExecutionPolicy&& policy, InputIterator first,
                                                                    InputIterator last, const T& value) {
    using value_type = typename std::iterator_traits<InputIterator>::value_type;

    return detail::_internal_count_if<ExecutionPolicy, InputIterator>(
        std::move(policy), first, last, [&value](const value_type& v) { return (v == static_cast<value_type>(value)); });
}


} // namespace parallel

} // namespace hadoken

#endif // PARALLEL_ALGORITHM_GENERICS_HPP
