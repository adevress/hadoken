/**
 * Copyright (c) 2018, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef HADOKEN_ENDIAN_HPP
#define HADOKEN_ENDIAN_HPP


#include <netinet/in.h>
#include <sys/param.h>

#include <cstdint>


namespace hadoken {

///
/// \brief host to network endianness conversion ( * -> bigendian )
/////
inline std::uint16_t hton(std::uint16_t n) { return htons(n); }

inline std::uint32_t hton(std::uint32_t n) { return htonl(n); }

inline std::uint64_t hton(std::uint64_t n) {
    const int num = 1;

    if (*(char*)&num == 1) {
        return (((std::uint64_t)htonl(n)) << 32) + htonl(n >> 32);
    }

    return n;
}




///
/// \brief network to host endianness conversion ( bigendian -> native )
/////
inline std::uint16_t ntoh(std::uint16_t n) { return ntohs(n); }

inline std::uint32_t ntoh(std::uint32_t n) { return ntohl(n); }

inline std::uint64_t ntoh(std::uint64_t n) {
    const int num = 1;

    if (*(char*)&num == 1) {
        return (((std::uint64_t)ntohl(n)) << 32) + ntohl(n >> 32);
    }

    return n;
}


} // namespace hadoken

#endif // ENDIAN_HPP
