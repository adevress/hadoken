/**
 * Copyright (c) 2018, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/

#ifndef HADOKEN_STATE_MACHINE_IMPL_HPP
#define HADOKEN_STATE_MACHINE_IMPL_HPP

#include "../state_machine.hpp"

namespace hadoken{


namespace impl{

} // impl

template<typename State>
int to_state_index_position(const State & s){
    return int(s);
}


template<typename State>
state_machine<State>::state_machine(State init_state) :
    _current_state(init_state){
    _resize(init_state);
}

template<typename State>
void state_machine<State>::_resize(const State & st){
    _handlers.resize(std::max<std::size_t>(to_state_index_position(st), _handlers.size()));
}

template<typename State>
State state_machine<State>::get_current_state() const{
    return _current_state;
}


template<typename State>
void state_machine<State>::trigger(){
    auto & handler = _handlers.at(to_state_index_position(_current_state));
    auto & transitions = handler._transitions;
    for(auto & transition : transitions ){
        const bool valid = transition._trans();
        if(valid){
            const State new_transtion = transition._next;
            auto & new_handler = _handlers.at(to_state_index_position(new_transtion));

            handler._on_exit(_current_state, new_transtion);

            const State old_transition = _current_state;
            _current_state = new_transtion;

            new_handler._on_entry(old_transition, _current_state);
            return;
        }
    }
}



} // hadoken

#endif // FSM_IMPL_HPP
