/**
 * Copyright (c) 2018, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef HADOKEN_STATE_MACHINE_HPP
#define HADOKEN_STATE_MACHINE_HPP

#include <vector>
#include <hadoken/utility/optional.hpp>

#include "impl/state_machine_transition_impl.hpp"

namespace hadoken{

//
// simple, stupid, easy Finite State Machine implementation C++11
//
// supports :
// - on edge execution
// - no memory allocation required for machines < 16 transitions
// - O(1) complexity for number of states
// - O(n) complexity for transition / states
//
template<typename State>
class state_machine{
public:
    state_machine(State init_state);

    /// trigger an event
    ///
    /// the state machine checks every possible transition and
    /// switch to a new state if possible
    ///
    ///  @return the old state is return
    State trigger();

    /// return the current state
    State get_current_state() const;

    /// force to a new state
    /// do not check transition
    /// do not trigger any action
    State force_state(State state);

    /// Add a new transition to the state machine
    ///
    /// The transition conditional function will be called
    /// every time the state machine is in a state "from" and
    ///  "trigger()" is called
    ///
    /// If the conditional function return true, the state machine
    ///  switch to state to
    void add_transition(State from, State to, std::function<bool ()> condition);

    void on_entry(State st, std::function<void (State before, State after)> event);

    void on_exit(State st, std::function<void (State before, State after)> event);

    void clear();

private:
    std::vector<impl::state_handler<State>> _handlers;
    State _current_state;

    void _resize(const State & st);
};


template<typename Object>
class edge_trigger{
public:
    edge_trigger(Object && o);

    void trigger(Object && o);

    hadoken::optional<Object> consume();

private:
    Object _o;
    bool _is_new;
};


} // hadoken


#include "impl/state_machine_impl.hpp"



#endif // HADOKEN_FSM_HPP
