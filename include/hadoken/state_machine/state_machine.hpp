/**
 * Copyright (c) 2018, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef HADOKEN_STATE_MACHINE_HPP
#define HADOKEN_STATE_MACHINE_HPP


#include <hadoken/containers/small_vector.hpp>

#include "impl/state_machine_transition_impl.hpp"

namespace hadoken{

//
// simple, stupid, easy Finite State Machine implementation C++11
//
// supports :
// - on edge execution
// - no memory allocation required for small machines
// - O(1) complexity for number of states
// - O(n) complexity for transition / states
//
template<typename State>
class state_machine{
public:
    state_machine(State init_state);

    void trigger();

    State get_current_state() const;

    void force_state(State state);

    void add_transition(State from, State to, std::function<bool ()> condition);

private:
    containers::small_vector<impl::state_handler<State>, 8> _handlers;
    State _current_state;

    void _resize(const State & st);
};


} // hadoken


#include "impl/state_machine_impl.hpp"



#endif // HADOKEN_FSM_HPP
