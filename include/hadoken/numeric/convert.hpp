/**
 * Copyright (c) 2019, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#pragma once

#include <cstdint>
#include <limits>
#include <numeric>
#include <stdexcept>
#include <string>
#include <type_traits>

namespace hadoken{

///
/// string to any integral number conversion
///
template<typename Integral>
inline  typename std::enable_if<std::is_same<Integral, int>::value, Integral>::type to_integral(const std::string & value, int base = 10){
    return std::stoi(value, nullptr, base);
}

template<typename Integral>
inline typename std::enable_if<std::is_same<Integral, unsigned int>::value, Integral>::type to_integral(const std::string & value, int base = 10){
    const auto v =  std::stoul(value, nullptr, base);
    if ( v > std::numeric_limits<unsigned int>::max()){
        throw std::out_of_range("overflow when converted to unsigned int");
    }
    return v;
}


template<typename Integral>
inline typename std::enable_if<std::is_same<Integral, long>::value, Integral>::type to_integral(const std::string & value, int base = 10){
    return std::stol(value, nullptr, base);
}


template<typename Integral>
inline typename std::enable_if<std::is_same<Integral, unsigned long>::value, Integral>::type to_integral(const std::string & value, int base = 10){
    return std::stoul(value, nullptr, base);
}

template<typename Integral>
inline typename std::enable_if<std::is_same<Integral, long long>::value, Integral>::type to_integral(const std::string & value, int base = 10){
    return std::stoll(value, nullptr, base);
}

template<typename Integral>
inline typename std::enable_if<std::is_same<Integral, unsigned long long>::value, Integral>::type to_integral(const std::string & value, int base = 10){
    return std::stoull(value, nullptr, base);
}


template<typename Floating>
inline typename std::enable_if<std::is_same<Floating, float>::value, Floating>::type to_floating(const std::string & value){
    return std::stof(value, nullptr);
}


template<typename Floating>
inline typename std::enable_if<std::is_same<Floating, double>::value, Floating>::type to_floating(const std::string & value){
    return std::stod(value, nullptr);
}

} // hadoken
