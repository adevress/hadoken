/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef _HADOKEN_OBJECT_CONES_HPP
#define _HADOKEN_OBJECT_CONES_HPP

#include <tuple>
#include <boost/geometry.hpp>

#include "sphere.hpp"

namespace hadoken {

namespace geometry {

namespace cartesian {


struct cone_object_tag{};


///
/// \class circle_base
///
///  oriented circle object in a 3D cartesian space
///
template<typename Point, typename CoordType>
class cone_base{
public:
    cone_object_tag object_type;
    typedef sphere_base<Point, CoordType> sphere_type;

    inline cone_base(const Point & center1, CoordType radius1, const Point & center2, CoordType radius2) :
        _x(std::make_tuple(sphere_type(center1, radius1), sphere_type(center2, radius2))) {}


    template<std::size_t N>
    inline Point get_center() const{
        return std::get<N>(_x).get_center();
    }

    template<std::size_t N>
    inline CoordType get_radius() const{
       return std::get<N>(_x).get_radius();
    }

private:
    std::tuple<sphere_type, sphere_type> _x;
};


} // cartesian

} // geometry

} // hadoken

#endif // CONES_HPP
