/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef THREAD_POOL_EXECUTOR_HPP
#define THREAD_POOL_EXECUTOR_HPP

#include <atomic>
#include <thread>
#include <chrono>
#include <vector>
#include <condition_variable>
#include <mutex>
#include <future>
#include <functional>


namespace hadoken{


namespace details{

class worker_thread{
public:
    inline worker_thread() :
                    exec(),
                    event_cond(),
                    mut(),
                    queue(),
                    finished(false) {
        queue.reserve(16);
        std::thread runner([this]() { run();});

        exec.swap(runner);
    }


    inline ~worker_thread(){
        finished.store(true);
        if(exec.joinable()){
            exec.join();
        }
    }


    inline void run(){
        while(!finished){
            std::function<void (void)> task;

            task = pop();

            if(task){
                task();
            }

        }

    }

    inline std::function<void (void)> pop(){
        std::function<void (void)> ret;
        std::unique_lock<std::mutex> l(mut);

        if(queue.size() > 0){
            ret = std::move(queue.back());
            queue.pop_back();
        }else{
            event_cond.wait_for(l, std::chrono::microseconds(10));
            if(queue.size() > 0){
                ret = std::move(queue.back());
                queue.pop_back();
            }
        }
        return ret;

    }

    inline void push(std::function<void (void)> && task){
        {
            std::unique_lock<std::mutex> l(mut);
            queue.emplace_back(std::move(task));
        }
        event_cond.notify_one();
    }

private:
    worker_thread(const worker_thread &) = delete;

    std::thread exec;
    std::condition_variable event_cond;
    std::mutex mut;

    std::vector<std::function<void (void)> > queue;

    std::atomic<bool> finished;
};


}

///
/// \brief Executor implementation for a simple thread
///
class thread_pool_executor{
public:
    thread_pool_executor(std::size_t n_thread =0) :
        _counter(0),
        _executors(){
        const std::size_t n_workers = (n_thread > 0) ? n_thread : (std::thread::hardware_concurrency());
        for(std::size_t i =0; i < n_workers; ++i){
            _executors.emplace_back( new details::worker_thread());
        }
    }

    ~thread_pool_executor(){

    }

    void execute(std::function<void (void)> task){
        std::size_t pos = _counter.fetch_add(1);
        pos = pos % _executors.size();
        _executors[pos]->push(std::move(task));
    }


private:
    std::atomic<std::size_t> _counter;
    std::vector<std::unique_ptr<details::worker_thread> > _executors;
};


}


#endif // SIMPLE_THREAD_EXECUTOR_HPP
