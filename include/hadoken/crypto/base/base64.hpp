/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#pragma once



#include <string>
#include <exception>

#include <boost/archive/iterators/binary_from_base64.hpp>
#include <boost/archive/iterators/base64_from_binary.hpp>
#include <boost/archive/iterators/transform_width.hpp>
#include <boost/algorithm/string.hpp>


namespace hadoken {

namespace base64{


////
/// \brief exception for any error occuring during base64 decoding
///
class base64_exception : public std::runtime_error{
public:
    inline base64_exception(const std::string & err) : std::runtime_error(err){}

};


///
/// \brief decode a base64 content
/// \param encoded base64 content to decode
/// \return decoded content
///
std::string decode(const std::string & encoded){
    using namespace boost::archive::iterators;

    try{
        using It = transform_width<binary_from_base64<std::string::const_iterator>, 8, 6>;
        return boost::algorithm::trim_right_copy_if(std::string(It(std::begin(encoded)), It(std::end(encoded))), [](char c) {
            return c == '\0';
        });
    } catch(std::exception & e ){
        throw base64_exception(e.what());
    }catch(...){
        throw base64_exception("unknown error");
    }
}


///
/// \brief encode arbitrary binary content to base64
/// \param encoded content to base64
/// \return encoded content
///
std::string encode(const std::string & decoded) {
    using namespace boost::archive::iterators;

    using It = base64_from_binary<transform_width<std::string::const_iterator, 6, 8>>;
    std::string tmp(It(std::begin(decoded)), It(std::end(decoded)));
    tmp.append((3 - decoded.size() % 3) % 3, '=');
    return tmp;
}


} // base64


} //hadoken
