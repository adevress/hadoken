/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef HADOKEN_WILDCARD_HPP
#define HADOKEN_WILDCARD_HPP


#include <string>

#include <hadoken/string/string_view.hpp>
#include <hadoken/containers/small_vector.hpp>

namespace hadoken{

namespace internal{

template<typename Iterator>
inline bool __match_wildcard_rec(Iterator begin_expr, Iterator end_expr, Iterator begin_str, Iterator end_str){
    if(begin_expr == end_expr && begin_str == end_str){
        return true;
    }

    if(begin_expr >= end_expr || begin_str >= end_str){
        return false;
    }

    if(*begin_expr == *begin_str){
        return __match_wildcard_rec(begin_expr+1, end_expr, begin_str+1, end_str);
    }

    if(*begin_expr != '*'){
        return false;
    }

    return __match_wildcard_rec(begin_expr+1, end_expr, begin_str+1, end_str)
            || __match_wildcard_rec(begin_expr, end_expr, begin_str+1, end_str)
            || __match_wildcard_rec(begin_expr+1, end_expr, begin_str, end_str);

}

template<typename Iterator, typename Vector>
void add_fragment_if_new( Iterator first_match,
                            Iterator last_match,
                            Vector & v){
    v.emplace_back(typename Vector::value_type(first_match, last_match));
}

template<typename Iterator, typename Vector>
inline bool __extract_fragment_rec(Iterator begin_expr, Iterator end_expr,
                                   Iterator begin_str, Iterator end_str,
                                   Iterator first_match,
                                   Vector & v){
 /*   if(begin_expr == end_expr && begin_str == end_str){
        return true;
    }

    if(begin_expr == end_expr || begin_str == end_str){
        return false;
    }

    if(*begin_expr == *begin_str){
        return __match_wildcard_rec(begin_expr+1, end_expr, begin_str+1, end_str);
    }

    if(*begin_expr != '*'){
        return false;
    }

    const bool match_remaining = __match_wildcard_rec(begin_expr+1, end_expr, begin_str+1, end_str);
    if(match_remaining){
        if(first_match != end_str){
            add_fragment_if_new(first_match, end_str, v);
            return true;
        }
    }*/

}


}

///
/// match a string with a given wildcard expression
///
/// e.g "blablalba" matches "bla*a" or "*bla*" or "*"
///     "hello" does not matches "*ol", "*hellop" or "*p"
///
///
inline bool match_wildcard(const std::string & expression, const std::string & str){
    return internal::__match_wildcard_rec(expression.begin(), expression.end(), str.begin(), str.end());
}


template<typename Vector>
inline void extract_wildcard(const std::string & expression, const std::string & str, Vector & fragments){

}


} // hadoken


#endif // WILDCARD_HPP
