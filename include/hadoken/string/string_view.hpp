/**
 * Copyright (c) 2018, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef HADOKEN_STRING_VIEW_HPP
#define HADOKEN_STRING_VIEW_HPP

#include <string>
#include <cstdint>
#include <ostream>
#include <utility>

namespace hadoken {

///
/// backport implementation of the C++17 string_view class
///
/// http://en.cppreference.com/w/cpp/string/basic_string_view
///
/// aims to be API comaptible with the standard one
///
/// We support for now only single byte char
///
class string_view
{
public:
    //traits_type 	Traits
    typedef char value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type& reference;
    typedef const value_type& const_reference;


    typedef  char* iterator;
    typedef char const* const_iterator;

    typedef std::size_t size_type;
    typedef std::ptrdiff_t difference_type;

    /// default constructor
    string_view() noexcept;

    /// constructor from std::string
    string_view(const std::string & str) noexcept;

    /// default copy constructor
    string_view(const string_view& other) noexcept = default;
    string_view(string_view&& other) noexcept = default;

    /// construct from char with known length
    string_view(const char* c_str, std::size_t length);

    /// construct from char with unknown length
    string_view(const char* c_str);

    /// default destructor
    ~string_view() = default;

    // iterator
    const_iterator begin() const;
    const_iterator end() const;

    // capacity
    size_type size() const noexcept;
    size_type length() const noexcept;

    bool empty() const noexcept;

    size_type max_size() const noexcept;

    // operations
    int compare(const string_view & other) const noexcept;

    // utility
    void swap(string_view & other) noexcept;

    const_pointer data() const noexcept;

    // operators
    string_view & operator =(const string_view & other) noexcept = default;

    char operator [](std::size_t pos) const;

private:
    char const* _pstr;
    size_type _len;

    friend std::ostream & operator <<(std::ostream & o, const string_view & sv);
};


bool operator==(const string_view & first, const string_view & second);


std::ostream & operator <<(std::ostream & o, const string_view & sv);


std::string to_string(const string_view & sv);

} // namespace hadoken


#include "bits/string_view_impl.hpp"

#endif // STRING_VIEW_HPP
