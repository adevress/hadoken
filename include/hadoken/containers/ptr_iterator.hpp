/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _PTR_ITERATOR_HPP_
#define _PTR_ITERATOR_HPP_

#include <iterator>


namespace hadoken {

namespace containers {


template <typename T>
class iterator_ptr : public std::iterator<std::input_iterator_tag, T> {
    T* p;

  public:
    explicit iterator_ptr(T* x) : p(x) {}

    iterator_ptr(const iterator_ptr& other) : p(other.p) {}

    iterator_ptr& operator++() {
        ++p;
        return *this;
    }


    bool operator==(const iterator_ptr& other) const noexcept { return p == other.p; }

    bool operator!=(const iterator_ptr& other) const noexcept { return p != other.p; }

    T& operator*() noexcept { return *p; }

    T* operator->() noexcept { return p; }

    bool operator<(const iterator_ptr& other) noexcept { return (p < other.p); }

    iterator_ptr& operator=(const iterator_ptr& other) {
        p = other.p;
        return *this;
    }
};


} // namespace containers



} // namespace hadoken


#endif // PTR_ITERATOR_HPP
