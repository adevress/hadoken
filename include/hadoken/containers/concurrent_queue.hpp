/**
 * Copyright (c) 2018, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef CONCURRENT_QUEUE_HPP
#define CONCURRENT_QUEUE_HPP

#include <chrono>
#include <condition_variable>
#include <deque>
#include <memory>


#include <hadoken/threading/std_thread_model.hpp>
#include <hadoken/utility/optional.hpp>

namespace hadoken {

///
/// simple thread-safe queue around STL container
///
template <typename T, typename ThreadModel = std_thread_model, typename Allocator = std::allocator<T>>
class concurrent_queue_stl_mut {
  public:
    explicit concurrent_queue_stl_mut(const Allocator& allocator = Allocator());

    void push(T element);


    template <typename Duration>
    optional<T> try_pop(const Duration& d);

    optional<T> try_pop();

    bool empty() const;

    std::size_t size() const;

    void set_small_buffer_size(std::uint64_t alloc_size);

  private:
    mutable typename ThreadModel::mutex _qmut;
    typename ThreadModel::condition_variable _qcond;
    std::deque<T, Allocator> _dek;
    std::uint64_t _buffer_capacity, _small_allocation;
};



template <typename T>
using concurrent_queue = concurrent_queue_stl_mut<T>;

} // namespace hadoken


#include "bits/concurrent_queue_bits.hpp"

#endif // CONCURRENT_QUEUE_HPP
