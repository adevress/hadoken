/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 * 
 * Boost Software License - Version 1.0 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
* 
*/

#define BOOST_TEST_MODULE containerTests
#define BOOST_TEST_MAIN

#include <iostream>
#include <sstream>
#include <stdexcept>
#include <future>

#include <boost/test/unit_test.hpp>

#include <hadoken/thread/spinlock.hpp>


BOOST_AUTO_TEST_CASE( spin_lock_simple_test)
{

    const std::string msg = "hello world, ";
    std::vector<std::future<void> > res;
    std::string shared_string;
    hadoken::thread::spin_lock lock;

    using namespace hadoken::thread;

    for(std::size_t i =0; i < 10; ++i){
        res.emplace_back(
            std::async(std::launch::async, [&] {
            for(std::size_t j =0; j < 200; ++j){
                std::lock_guard<hadoken::thread::spin_lock> guard(lock);
                shared_string.append(msg);
            }
        }));
    }

    for(auto & f : res){
        f.wait();
    }

    BOOST_CHECK(shared_string.empty() == false);

    std::size_t counter = 0, pos = 0;

    while(pos < shared_string.size()){
        std::size_t lpos;
        if( (lpos = shared_string.find(msg, pos)) != std::string::npos){
            counter +=1;
            pos = lpos + msg.size();
        }else{
            break;
        }
    }

    BOOST_CHECK_EQUAL(counter, 10*200);


}
