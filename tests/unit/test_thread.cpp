/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#define BOOST_TEST_MODULE containerTests
#define BOOST_TEST_MAIN

#include <functional>
#include <future>
#include <iostream>
#include <sstream>
#include <stdexcept>

#include <boost/test/unit_test.hpp>

#include <hadoken/executor/simple_thread_executor.hpp>
#include <hadoken/executor/thread_pool_executor.hpp>
#include <hadoken/thread/latch.hpp>
#include <hadoken/thread/spinlock.hpp>


BOOST_AUTO_TEST_CASE(spin_lock_simple_test) {

    const std::string msg = "hello world, ";
    std::vector<std::future<void>> res;
    std::string shared_string;
    hadoken::thread::spin_lock lock;

    using namespace hadoken::thread;

    for (std::size_t i = 0; i < 10; ++i) {
        res.emplace_back(std::async(std::launch::async, [&] {
            for (std::size_t j = 0; j < 200; ++j) {
                std::lock_guard<hadoken::thread::spin_lock> guard(lock);
                shared_string.append(msg);
            }
        }));
    }

    for (auto& f : res) {
        f.wait();
    }

    BOOST_CHECK(shared_string.empty() == false);

    std::size_t counter = 0, pos = 0;

    while (pos < shared_string.size()) {
        std::size_t lpos;
        if ((lpos = shared_string.find(msg, pos)) != std::string::npos) {
            counter += 1;
            pos = lpos + msg.size();
        } else {
            break;
        }
    }

    BOOST_CHECK_EQUAL(counter, 10 * 200);
}



BOOST_AUTO_TEST_CASE(executor_simple_thread_test) {
    hadoken::simple_thread_executor exec_thread;

    std::plus<int> add;

    std::packaged_task<int(int, int)> task(add);

    auto f = task.get_future();

    exec_thread.execute([&]() { task(40, 2); });

    BOOST_CHECK_EQUAL(f.get(), 42);
}


BOOST_AUTO_TEST_CASE(executor_pool_thread_test) {
    hadoken::thread_pool_executor exec_thread;

    std::plus<int> add;

    std::packaged_task<int(int, int)> task(add);

    auto f = task.get_future();

    exec_thread.execute([&]() { task(40, 2); });

    BOOST_CHECK_EQUAL(f.get(), 42);
}


BOOST_AUTO_TEST_CASE(executor_pool_thread_wait) {
    std::mutex lock;
    std::size_t counter = 0;
    const std::size_t iterations = 256;

    {
        hadoken::thread_pool_executor exec_thread(32);

        for (std::size_t i = 0; i < iterations; ++i) {
            exec_thread.execute([&]() {
                std::lock_guard<std::mutex> _l(lock);
                counter += 1;
            });
        }

        // enforce thread pool destruction
    }

    BOOST_CHECK_EQUAL(counter, 256);
}



BOOST_AUTO_TEST_CASE(latch_test) {
    {
        hadoken::thread::latch l1(0);
        BOOST_CHECK_EQUAL(l1.is_ready(), true);
    }

    {
        hadoken::thread::latch l2(15);
        BOOST_CHECK_EQUAL(l2.is_ready(), false);
        l2.count_down(5);
        BOOST_CHECK_EQUAL(l2.is_ready(), false);
        l2.count_down(10);
        BOOST_CHECK_EQUAL(l2.is_ready(), true);
    }

    {
        hadoken::thread::latch l2(8);

        BOOST_CHECK_EQUAL(l2.is_ready(), false);

        std::vector<std::future<void>> res;
        for (std::size_t i = 0; i < 8; ++i) {
            res.emplace_back(std::async(std::launch::async, [&] { l2.count_down(); }));
        }

        l2.wait();

        BOOST_CHECK_EQUAL(l2.is_ready(), true);
    }

    {
        hadoken::thread::latch l2(16);

        BOOST_CHECK_EQUAL(l2.is_ready(), false);

        std::vector<std::future<void>> res;
        for (std::size_t i = 0; i < 16; ++i) {
            res.emplace_back(std::async(std::launch::async, [&] {
                BOOST_CHECK_EQUAL(l2.is_ready(), false);
                l2.count_down_and_wait();
            }));
        }

        for (auto& f : res) {
            f.wait();
        }

        BOOST_CHECK_EQUAL(l2.is_ready(), true);
    }

    {
        hadoken::thread::latch l2(64);

        BOOST_CHECK_EQUAL(l2.is_ready(), false);

        std::vector<std::future<void>> res;
        for (std::size_t i = 0; i < 63; ++i) {
            res.emplace_back(std::async(std::launch::async, [&] { l2.count_down(); }));
        }

        l2.count_down_and_wait();

        BOOST_CHECK_EQUAL(l2.is_ready(), true);
    }
}
