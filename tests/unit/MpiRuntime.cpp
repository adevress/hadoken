/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 * 
 * Boost Software License - Version 1.0 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
* 
*/

#define BOOST_TEST_MODULE mpiTests
#define BOOST_TEST_MAIN

#include <boost/test/included/unit_test.hpp>

#include "functionalizer/utils/mpiRuntime.h"

int argc = boost::unit_test::framework::master_test_suite().argc;
char ** argv = boost::unit_test::framework::master_test_suite().argv;



boost::scoped_ptr<MpiRuntime> runtime;


MpiRuntime & getRuntime(){
    if(!runtime){
        runtime.reset(new MpiRuntime());
    }
    return *runtime;
}



BOOST_AUTO_TEST_CASE( mpiTests )
{

    MpiRuntime::setArgv(&argc, &argv);
    const int rank = getRuntime().rank();
    const int size = getRuntime().size();

    BOOST_CHECK(rank >=0);
    BOOST_CHECK(size > 0);
    BOOST_CHECK(rank < size);

    std::cout << " rank:" << rank << " size:" << size;

    getRuntime().syncBarrier();

}


BOOST_AUTO_TEST_CASE( mpiMax)
{

    MpiRuntime::setArgv(&argc, &argv);
    const int rank = getRuntime().rank();
    const int size = getRuntime().size();

    int proc_number = (rank+1)*10;
    int max_proc_number = 0;

    max_proc_number = getRuntime().allMax(proc_number);

    BOOST_CHECK(max_proc_number == (size)*10);




}


BOOST_AUTO_TEST_CASE( mpiSum)
{

    MpiRuntime::setArgv(&argc, &argv);

    const int rank = getRuntime().rank();
    const int size = getRuntime().size();

    int proc_number = (rank+1)*10;
    int sum_proc_number=0;
    for(int i =1; i < getRuntime().size()+1; ++i)
        sum_proc_number+=i*10;

    int sum_all = getRuntime().allSum(proc_number);


    size_t sum_size = getRuntime().allSum(static_cast<size_t>(size));


    BOOST_CHECK(sum_proc_number == sum_all);
    BOOST_CHECK(sum_size == static_cast<size_t>(size)* static_cast<size_t>(size));


}
