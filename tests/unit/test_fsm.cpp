/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 * 
 * Boost Software License - Version 1.0 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
* 
*/

#define BOOST_TEST_MODULE nfsmTests
#define BOOST_TEST_MAIN

#include <iostream>
#include <sstream>
#include <stdexcept>
#include <future>
#include <algorithm>
#include <random>
#include <numeric>

#include <chrono>

#include <boost/test/unit_test.hpp>

#include <hadoken/fsm/fsm.hpp>



using namespace hadoken;
using cl = std::chrono::system_clock;

enum class semaphore_status{
    cross1 = 0,
    cross2 = 1,
    cross3 = 3,
    emergency = 4
};


BOOST_AUTO_TEST_CASE( semaphore_test)
{

    fsm<semaphore_status> semaphore_state_machine(semaphore_status::cross1);

    BOOST_CHECK(semaphore_status::cross1 == semaphore_state_machine.get_current_state());
}
