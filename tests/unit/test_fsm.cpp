/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 * 
 * Boost Software License - Version 1.0 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
* 
*/

#define BOOST_TEST_MODULE nfsmTests
#define BOOST_TEST_MAIN

#include <iostream>
#include <sstream>
#include <stdexcept>
#include <future>
#include <algorithm>
#include <random>
#include <numeric>

#include <chrono>

#include <boost/test/unit_test.hpp>

#include <hadoken/state_machine/state_machine.hpp>
#include <hadoken/format/format.hpp>



using namespace hadoken;
using cl = std::chrono::system_clock;

enum class life_status{
    home = 0,
    work = 1,
    bed = 3,
    beer = 4
};


BOOST_AUTO_TEST_CASE( semaphore_test)
{

    state_machine<life_status> semaphore_state_machine(life_status::work);

    BOOST_CHECK(life_status::work == semaphore_state_machine.get_current_state());


    auto prev = semaphore_state_machine.force_state(life_status::home);
    BOOST_CHECK(life_status::home == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::work == prev);


    edge_trigger<bool> drive_to(false), drive_back(false), need_sleep(false), morning(false), fun(false);

    std::string entry_message, exit_message;

    std::array<life_status,4> states = { life_status::home, life_status::work, life_status::bed, life_status::beer };

    for( auto st : states){
        semaphore_state_machine.on_entry(st, [st, &entry_message](life_status from, life_status to){
            entry_message = scat("hello entry ", int(st), " from ", int(from), " to ", int(to));
            std::cout << entry_message << "\n";
        });

        semaphore_state_machine.on_exit(st, [st, &exit_message](life_status from, life_status to){
            exit_message = scat("hello exit ", int(st), " from ", int(from), " to ", int(to));
            std::cout << exit_message << "\n";
        });
    }

    semaphore_state_machine.add_transition(life_status::home, life_status::work, [&]() -> bool{
        return bool(drive_to.consume());
    });

    semaphore_state_machine.add_transition(life_status::work, life_status::home, [&]() -> bool{
        return bool(drive_back.consume());
    });

    semaphore_state_machine.add_transition(life_status::home, life_status::bed, [&]() -> bool{
        return bool(need_sleep.consume());
    });

    semaphore_state_machine.add_transition(life_status::bed, life_status::home, [&]() -> bool{
        return bool(morning.consume());
    });

    semaphore_state_machine.add_transition(life_status::home, life_status::beer, [&]() -> bool{
        return bool(fun.consume());
    });

    semaphore_state_machine.add_transition(life_status::work, life_status::beer, [&]() -> bool{
        return bool(fun.consume());
    });


    semaphore_state_machine.add_transition(life_status::beer, life_status::bed, [&]() -> bool{
        return bool(need_sleep.consume());
    });

    // let's start from home
    // and check we are home
    BOOST_CHECK(life_status::home == semaphore_state_machine.get_current_state());

    prev = semaphore_state_machine.trigger();
    BOOST_CHECK(life_status::home == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::home == prev);

    // we drove
    drive_to.trigger(true);
    prev = semaphore_state_machine.trigger();

    // We are at work now
    BOOST_CHECK(life_status::work == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::home == prev);

    // still at work
    prev = semaphore_state_machine.trigger();
    BOOST_CHECK(life_status::work == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::work == prev);


    need_sleep.trigger(true);
    drive_to.trigger(true);

    // we need some sleep and drive more
    // but still we need to work
    prev = semaphore_state_machine.trigger();
    BOOST_CHECK(life_status::work == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::work == prev);

    // time to drive back is here
    drive_to.consume();
    drive_back.trigger(true);
    prev = semaphore_state_machine.trigger();

    // we should be home now
    BOOST_CHECK(life_status::home == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::work == prev);

    // but we still need sleep, next step should be sleep
    prev = semaphore_state_machine.trigger();
    BOOST_CHECK(life_status::bed == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::home == prev);

    // and a natural wake up
    morning.trigger(true);
    prev = semaphore_state_machine.trigger();


    BOOST_CHECK(life_status::home == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::bed == prev);


    // but at the end we all finish there

    fun.trigger(true);
    prev = semaphore_state_machine.trigger();
    BOOST_CHECK(life_status::beer == semaphore_state_machine.get_current_state());
    BOOST_CHECK(life_status::home == prev);

}
