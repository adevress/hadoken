/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 * 
 * Boost Software License - Version 1.0 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
* 
*/

#define BOOST_TEST_MODULE geometryTests
#define BOOST_TEST_MAIN

#include <iostream>
#include <sstream>



#include <boost/test/unit_test.hpp>
#include <boost/mpl/list.hpp>

#include <hadoken/geometry/geometry.hpp>


typedef boost::mpl::list<double, float, long double> floating_point_type;

//
// simple stupid test for 3D distance computation
BOOST_AUTO_TEST_CASE_TEMPLATE( simple_distance_fp, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    geo::point3<T> p1 = { 0, 0, 0 };

    geo::point3<T> p2 = { 1, 1, 1 };

    auto d = geo::distance(p1, p2);

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(p2, p1);

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(p2, p2);

    BOOST_CHECK_CLOSE(d, std::sqrt(0.0), 0.001);
}



//
// simple stupid test for std::array kernel
BOOST_AUTO_TEST_CASE_TEMPLATE( simple_distance_array_fp, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    std::array<T,3> p1 = { 0, 0, 0 };

    std::array<T,3> p2 = { 1, 1, 1 };

    auto d = geo::distance(geo::make_point(p1), geo::make_point(p2));

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(geo::make_point(p2), geo::make_point(p1));

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(geo::make_point(p2), geo::make_point(p2));

    BOOST_CHECK_CLOSE(d, std::sqrt(0.0), 0.001);
}



// test kernel implementation for personnalized data struct
struct dummy_point{
    double x, y, z;
};


hadoken::geometry::cartesian::point3<double> make_point(const dummy_point & t){
    return hadoken::geometry::cartesian::make_point<double>(std::array<double,3>{ t.x, t.y, t.z});
}

//
// simple stupid test for std::array kernel
BOOST_AUTO_TEST_CASE_TEMPLATE( dummy_override_distance, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    dummy_point p1 = { 0, 0, 0 };

    dummy_point p2 = { 1, 1, 1 };

    auto d = geo::distance(make_point(p1), make_point(p2));

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(make_point(p2), make_point(p1));

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(make_point(p2), make_point(p2));

    BOOST_CHECK_CLOSE(d, std::sqrt(0.0), 0.001);
}



//
// simple stupid test for 3D distance and centroid computation with multipoint
/*
BOOST_AUTO_TEST_CASE_TEMPLATE( multipoint_distance_fp, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    geo::point<T> p1 = { 0, 0, 0 };

    geo::point<T> p2 = { 2, 0, 0 }, p3 =  { -2, 0, 0}, p4 = { 0, 2, 0}, p5 = { 0, -2, 0 };

    geo::multipoint<T> mp;
    mp.push_back(p2);
    mp.push_back(p3);
    mp.push_back(p4);
    mp.push_back(p5);

    auto distance_to_mp = geo::distance(p1, mp);
    auto distance_to_p2 = geo::distance(p1, p2);

    std::cout << "distance to mp " << distance_to_mp << " distance_to_p2 " << distance_to_p2 << std::endl;
    BOOST_CHECK_CLOSE(distance_to_mp, distance_to_p2, 0.01);

    auto centroid = geo::centroid<geo::point<T>>(mp);
    auto distance_to_centroid = geo::distance(p1, centroid);
    BOOST_CHECK_CLOSE(distance_to_centroid, 0, 0.01);
}

*/



