/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 * 
 * Boost Software License - Version 1.0 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
* 
*/

#define BOOST_TEST_MODULE geometryTests
#define BOOST_TEST_MAIN

#include <iostream>
#include <sstream>



#include <boost/test/unit_test.hpp>
#include <boost/mpl/list.hpp>

#include <hadoken/geometry/geometry.hpp>


typedef boost::mpl::list<double, float, long double> floating_point_type;

//
// simple stupid test for 3D distance computation
BOOST_AUTO_TEST_CASE_TEMPLATE( simple_distance_fp, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    geo::point3<T> p1 = { 0, 0, 0 };

    geo::point3<T> p2 = { 1, 1, 1 };

    auto d = geo::distance(p1, p2);

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(p2, p1);

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(p2, p2);

    BOOST_CHECK_CLOSE(d, std::sqrt(0.0), 0.001);
}



//
// simple stupid test for std::array kernel
BOOST_AUTO_TEST_CASE_TEMPLATE( simple_distance_array_fp, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    std::array<T,3> p1 = { 0, 0, 0 };

    std::array<T,3> p2 = { 1, 1, 1 };

    auto d = geo::distance(geo::make_point(p1), geo::make_point(p2));

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(geo::make_point(p2), geo::make_point(p1));

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(geo::make_point(p2), geo::make_point(p2));

    BOOST_CHECK_CLOSE(d, std::sqrt(0.0), 0.001);
}



// test kernel implementation for personnalized data struct
struct dummy_point{
    double x, y, z;
};


hadoken::geometry::cartesian::point3<double> make_point(const dummy_point & t){
    return hadoken::geometry::cartesian::make_point<double>(std::array<double,3>{ t.x, t.y, t.z});
}

//
// simple stupid test for std::array kernel
BOOST_AUTO_TEST_CASE_TEMPLATE( dummy_override_distance, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    dummy_point p1 = { 0, 0, 0 };

    dummy_point p2 = { 1, 1, 1 };

    auto d = geo::distance(make_point(p1), make_point(p2));

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(make_point(p2), make_point(p1));

    BOOST_CHECK_CLOSE(d, std::sqrt(3.0), 0.001);

    d = geo::distance(make_point(p2), make_point(p2));

    BOOST_CHECK_CLOSE(d, std::sqrt(0.0), 0.001);
}



//
// operator test for point_base

BOOST_AUTO_TEST_CASE_TEMPLATE( point_base_test, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    using local_point = geo::point_base<T,3>;

    local_point p1 = { 0, 0, 10 };

    local_point p2 = { 2, 0, 0 }, p3 =  { -2, 0, 0}, p4 = { 0, 2, 0}, p5 = { 0, -2, 0 };


    auto ptest = p1 + p2;


    BOOST_CHECK_CLOSE(ptest(0), 2, 0.001);
    BOOST_CHECK_CLOSE(ptest(1), 0, 0.001);
    BOOST_CHECK_CLOSE(ptest(2), 10, 0.001);

    ptest -= p2;

    BOOST_CHECK_CLOSE(ptest(0), p1(0), 0.001);
    BOOST_CHECK_CLOSE(ptest(1), p1(1), 0.001);
    BOOST_CHECK_CLOSE(ptest(2), p1(2), 0.001);

    ptest = p2 - p3 + p3 - p2;
    BOOST_CHECK(ptest.close_to(local_point({0, 0, 0})));
    BOOST_CHECK(ptest.close_to(local_point({0, 0, 1})) == false);

    ptest = p1;
    ptest += ptest;
    BOOST_CHECK(ptest.close_to(p1 +p1));
    ptest -= ptest;
    BOOST_CHECK(ptest.close_to(local_point({0, 0, 0})));

    BOOST_CHECK_CLOSE(std::accumulate(p2.begin(), p2.end(), 0), 2.0,  0.001);

    std::ostringstream ss;
    ss << p1 << " " << p2 << std::endl;

    std::cout << "point " << p1 << std::endl;

    // check boost geometry mapping
    BOOST_CHECK_EQUAL(geo::get_x(p1), p1(0));
    BOOST_CHECK_EQUAL(geo::get_y(p1), p1(1));
    BOOST_CHECK_EQUAL(geo::get_z(p1), p1(2));
    BOOST_CHECK_CLOSE(geo::distance(p1, p1), 0, 0.001);

}



//
// basic tests on cross product

BOOST_AUTO_TEST_CASE_TEMPLATE( cross_product_base_test, T, floating_point_type )
{
    namespace geo = hadoken::geometry::cartesian;

    using local_vector = geo::vector3<T>;


    BOOST_CHECK(geo::cross_product(local_vector(5.5, 0, 0), local_vector(0, 5.5, 0)).close_to(local_vector(0, 0, 5.5*5.5 )));
    BOOST_CHECK(geo::cross_product(local_vector(-3.3, 0, 0), local_vector(0, -3.3, 0)).close_to(local_vector(0, 0, 3.3*3.3 )));
    BOOST_CHECK(geo::cross_product(local_vector(0, 5.5, 0), local_vector(5.5, 0, 0)).close_to(local_vector(0, 0, - 5.5*5.5 )));


    local_vector v1(9.9, 1.1, 4.4);
    local_vector v1_inv = v1;
    v1_inv *= -1.0;

    BOOST_CHECK(geo::cross_product(v1, v1).close_to(local_vector(0, 0, 0 )));
    BOOST_CHECK(geo::cross_product(v1, v1_inv).close_to(local_vector(0, 0, 0 )));
}




