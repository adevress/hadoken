/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 * 
 * Boost Software License - Version 1.0 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
* 
*/

#define BOOST_TEST_MODULE genericTests
#define BOOST_TEST_MAIN

#include <iostream>
#include <map>

#include <boost/test/unit_test.hpp>
#include <boost/test/floating_point_comparison.hpp>
#include <boost/array.hpp>
#include <boost/math/constants/constants.hpp>
#include <boost/variant.hpp>

#include <hadoken/string/wildcard.hpp>
#include <hadoken/utility/optional.hpp>
#include <hadoken/utility/variant.hpp>
#include <hadoken/numeric/float.hpp>
#include <hadoken/numeric/convert.hpp>




BOOST_AUTO_TEST_CASE(optional_to_variant)
{

    hadoken::variant<int, float, std::string> my_variant;

    hadoken::optional<std::string> my_opt;

    BOOST_CHECK( ! my_opt );
    BOOST_CHECK_EQUAL(bool(my_opt), false);

    BOOST_CHECK_EQUAL(my_variant.which(), 0);

    my_variant = hadoken::to_variant<hadoken::variant<int, float, std::string>>(my_opt);
    BOOST_CHECK_EQUAL(my_variant.which(), 0);

}




BOOST_AUTO_TEST_CASE(integral_convertion)
{
    using namespace hadoken;

    // dummy integer convert
    int a = to_integral<int>("5");
    BOOST_CHECK_EQUAL(a , 5);

    // different base
    a = to_integral<int>("0x10", 16);
    BOOST_CHECK_EQUAL(a, 16);

    // force on size_t
    std::size_t value = to_integral<std::size_t>("5000");
    BOOST_CHECK_EQUAL(value, 5000);


    // check exception
    BOOST_CHECK_THROW({
        long long value = to_integral<long long>("to the infinite and beyond");
        (void) value;
    }, std::invalid_argument);


    // check unsigned int
    unsigned int u_value = to_integral<unsigned int>(std::to_string(std::numeric_limits<unsigned int>::max()));
    BOOST_CHECK_EQUAL(u_value, std::numeric_limits<unsigned int>::max());

    // check fixed size convertion
    std::uint64_t u64_value = to_integral<std::uint64_t>("42");
    BOOST_CHECK_EQUAL(u64_value, 42);


    // check floating point
    double d = to_floating<double>("42.88");
    BOOST_CHECK(close_to_abs(42.88, d));
}




