/**
 * Copyright (c) 2016, Adrien Devresse <adrien.devresse@epfl.ch>
 * 
 * Boost Software License - Version 1.0 
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
* 
*/

#define BOOST_TEST_MODULE parallelTests
#define BOOST_TEST_MAIN

#include <iostream>
#include <sstream>
#include <stdexcept>
#include <future>

#include <chrono>

#include <boost/test/unit_test.hpp>

#include <hadoken/parallel/algorithm.hpp>

#include <parallel/algorithm>


BOOST_AUTO_TEST_CASE( parallel_for_each_simple_test)
{

    using namespace hadoken;
    using cl = std::chrono::system_clock;

    std::vector<double> values;
    parallel::for_each(parallel::seq, values.begin(), values.end(), [](double & v){ v += 42; });

    parallel::for_each(parallel::parallel_execution_policy(), values.begin(), values.end(), [](double & v){ v += 422; });

    parallel::for_each(parallel::parallel_vector_execution_policy(), values.begin(), values.end(), [](double & v){ v += 4222; });


    values = std::vector<double>(128000, 128);

    auto t1 = cl::now();

	auto fops = [](double & v){
        double res = std::pow(v, 4);
        res = std::sqrt(res);
        v = res;

     };


    parallel::for_each(parallel::seq, values.begin(), values.end(), fops);


    auto t2 = cl::now();

    for(auto i : values){
        BOOST_CHECK_CLOSE(i, 128*128, 0.01);
    }


    std::cout << "sequential " << std::chrono::duration_cast<std::chrono::microseconds>(t2 -t1).count() << std::endl;

    values = std::vector<double>(128000, 128);

    t1 = cl::now();

    parallel::for_each(parallel::parallel_execution_policy(), values.begin(), values.end(), fops);
    //__gnu_parallel::for_each(values.begin(), values.end(), [](int & v){ v += 100; });

    t2 = cl::now();


    for(auto i : values){
         BOOST_CHECK_CLOSE(i, 128*128, 0.01);
    }

    std::cout << "parallel " << std::chrono::duration_cast<std::chrono::microseconds>(t2 -t1).count() << std::endl;


    values = std::vector<double>(128000, 128);

    parallel::for_each(parallel::parallel_vector_execution_policy(), values.begin(), values.end(), fops);


 
    for(auto i : values){
         BOOST_CHECK_CLOSE(i, 128*128, 0.01);
    }}

